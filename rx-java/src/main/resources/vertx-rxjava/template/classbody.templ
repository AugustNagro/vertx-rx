	  final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	  final io.vertx.core.Vertx vertx;\n\n

	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate, io.vertx.core.Vertx vertx) {\n
	@if{ifaceFQCN != 'io.vertx.core.Vertx'}
	@if{concrete && concreteSuperTypes.size() > 0}
	    super(delegate, vertx);\n
	@end{}
	    this.delegate = delegate;\n
	    this.vertx = vertx;\n
	@else{}
	    this.delegate = delegate;\n
	    this.vertx = delegate;\n
	@end{}
	  }\n\n

	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	    this(delegate, null);\n
	  }\n\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n\n

	@if{type.raw.readStream}
		@code{streamType=type.raw.readStreamArg}
  private rx.Observable<@{streamType.simpleName}> observable;\n\n

  public synchronized rx.Observable<@{streamType.simpleName}> toObservable() {\n
    if (observable == null) {\n
		@if{streamType.kind == CLASS_API}
      java.util.function.BiFunction<@{streamType.raw.name}, io.vertx.core.Vertx, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      observable = InternalHelper.toObservable((io.vertx.core.streams.ReadStream) getDelegate(), vertx, conv);\n
		@else{}
      observable = io.vertx.rx.java.RxHelper.toObservable((io.vertx.core.streams.ReadStream<@{streamType.name}>) this.getDelegate(), vertx);\n
		@end{}
    }\n
    return observable;\n
  }\n\n
	@end{}

	@foreach{method:methods}
		@includeNamed{'genMethod'}
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
