	  final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperTypes.size() > 0}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n

	@if{type.raw.readStream}
		@code{streamType=type.raw.readStreamArg}
  private rx.Observable<@{streamType.simpleName}> observable;\n

  public synchronized rx.Observable<@{streamType.simpleName}> toObservable() {\n
    if (observable == null) {\n
		@if{streamType.kind == CLASS_API}
      java.util.function.Function<@{streamType.raw.name}, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      io.vertx.lang.rxjava.ReadStreamAdapter<@{streamType.raw.name}, @{streamType.simpleName}> adapter = new io.vertx.lang.rxjava.ReadStreamAdapter<>(this, conv);\n
      observable = rx.Observable.create(adapter);\n
		@else{}
      observable = io.vertx.rx.java.RxHelper.toObservable((io.vertx.core.streams.ReadStream<@{streamType.name}>) this.getDelegate());\n
		@end{}
    }\n
    return observable;\n
  }\n
	@end{}

	@foreach{method:methods}
	@if{method.comment != null}
	  /**\n
	   *@{method.comment.replaceAll('\n(?!$)', '\n   *')}
	   */\n
	@end{}
	  @includeNamed{'startMethodTemplate';method:method}\n
	@if{method.fluent}
	    @includeNamed{'invokeDelegate';method:method};\n
			@if{method.returnType instanceof io.vertx.codegen.TypeInfo$Variable}
	    return (@{method.returnType.name}) this;\n
			@else{}
	    return this;\n
			@end{}
	@else{method.returnType.name.equals('void')}
	    @includeNamed{'invokeDelegate';method:method};\n
	@else{}
		@if{method.cacheReturn}
		    if (cached_@{cacheDecls.size()} != null) {\n
		      return cached_@{cacheDecls.size()};\n
		    }\n
		@end{}
		@if{method.returnType.kind == CLASS_OBJECT}
			@code{cachedType=method.returnType.simpleName}
		    @{cachedType=method.returnType.simpleName} ret = (@{cachedType=method.returnType.simpleName}) @includeNamed{'invokeDelegate';method:method};\n
		@else{method.returnType.kind == CLASS_LIST || method.returnType.kind == CLASS_SET}
			@code{collectionName=method.returnType.raw.simpleName}
			@code{elementType=method.returnType.args[0]}
			@code{elementKind=elementType.kind}
			@code{cachedType=method.returnType.simpleName}
			@if{elementKind.basic || elementKind.json}
		    @{method.returnType.simpleName} ret = @includeNamed{'invokeDelegate';method:method};\n;\n
			@else{}
		    @{method.returnType.simpleName} ret = @includeNamed{'invokeDelegate';method:method}.stream().map(@{elementType.simpleName}::newInstance).collect(java.util.stream.Collectors.to@{collectionName}());\n
			@end{}
		@else{method.returnType.kind == CLASS_MAP}
			@code{elementType=method.returnType.args[1]}
			@code{elementKind=elementType.kind}
			@code{cachedType=method.returnType.simpleName}
		    @{method.returnType.simpleName} ret = @includeNamed{'invokeDelegate';method:method};\n;\n
		@else{method.returnType.kind == CLASS_API}
			@code{cachedType=method.returnType.simpleName}
		    @{method.returnType.simpleName} ret= @{method.returnType.raw.simpleName}.newInstance(@includeNamed{'invokeDelegate';method:method});\n
		@else{}
			@code{cachedType=method.returnType.name}
		    @{method.returnType.simpleName} ret = @includeNamed{'invokeDelegate';method:method};\n
		@end{}
		@if{method.cacheReturn}
		    cached_@{cacheDecls.size()} = ret;\n
			@code{cacheDecls.add('private' + (method.staticMethod ? ' static' : '') + ' ' + cachedType + ' cached_' + cacheDecls.size())}
		@end{}
		    return ret;\n
		@end{}
	  }\n

	@if{method.kind == METHOD_FUTURE}
	@code{methodName=method.name}
	@code{futureParams=new java.util.ArrayList(method.params)}
	@code{futureParam=futureParams.remove(futureParams.size()-1)}
	@code{futureType=futureParam.type.args[0].args[0]}
	@code{futureReturnType=new io.vertx.codegen.TypeInfo$Parameterized(io.vertx.codegen.TypeInfo.create(rx.Observable), java.util.Collections.singletonList(futureType))}
	@code{futureMethod=new io.vertx.codegen.MethodInfo(method.ownerTypes,method.name + 'Observable',method.kind,futureReturnType,method.fluent,method.cacheReturn,futureParams,method.comment,method.staticMethod,method.typeParams)}
	  @includeNamed{'startMethodTemplate';method=futureMethod}\n
	    io.vertx.rx.java.ObservableFuture<@{futureType.simpleName}> @{futureParam.name} = io.vertx.rx.java.RxHelper.observableFuture();\n
	    @{methodName}(@foreach{param:futureParams}@{param.name}@end{', '}@if{futureParams.size() > 0}, @end{}@{futureParam.name}.asHandler());\n
	    return @{futureParam.name};\n
	  }\n
	@end{}

	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
